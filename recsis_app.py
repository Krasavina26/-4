import streamlit as st
import numpy as np
import pandas as pd
from PIL import Image
from pathlib import Path
import requests
from io import BytesIO

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π
class PathConfig:
    BASE_DIR = Path(r"C:\Users\krask\Downloads")
    ARCHIVE_DIR = BASE_DIR / "archive-20250423T214020Z-001" / "archive" / "fashion-dataset"

    IMAGES = ARCHIVE_DIR / "fashion-dataset" / "images"
    STYLES = ARCHIVE_DIR / "styles.csv"
    FEATURES = BASE_DIR / "features (1).npy"
    COSINE_SIM = BASE_DIR / "cosine_sim (1).npy"


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏
def load_image_from_path(img_path, target_size=(224, 224)):
    try:
        img = Image.open(img_path)
        return img.resize(target_size)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—É—Ç–∏ {img_path}: {e}")
        return None


@st.cache_data
def load_data(max_images=1000):
    config = PathConfig()

    # –ó–∞–≥—Ä—É–∑–∫–∞ styles.csv
    df = pd.read_csv(config.STYLES, on_bad_lines='warn')
    df['id'] = df['id'].astype(str)
    df['image_id'] = df['id'] + '.jpg'

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    features = np.load(config.FEATURES)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
    cosine_sim = np.load(config.COSINE_SIM)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ image_id –≤ –ø–æ—Ä—è–¥–∫–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
    image_files = [p.name for p in sorted(config.IMAGES.glob("*.jpg")) if p.name in df['image_id'].values]

    # –§–∏–ª—å—Ç—Ä—É–µ–º DataFrame, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ image_id –∏–∑ image_files
    df_filtered = df[df['image_id'].isin(image_files)].copy()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º df_filtered –ø–æ –ø–æ—Ä—è–¥–∫—É image_files
    df_filtered['image_id'] = pd.Categorical(df_filtered['image_id'], categories=image_files, ordered=True)
    df_filtered = df_filtered.sort_values('image_id').reset_index(drop=True)

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å image_to_index: image_id -> –∏–Ω–¥–µ–∫—Å (–ø–æ–∑–∏—Ü–∏—è –≤ features –∏ cosine_sim)
    image_to_index = {image_id: idx for idx, image_id in enumerate(image_files)}

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∏–ª—è—Ö
    styles_dict = df_filtered.set_index('image_id').to_dict('index')

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    image_paths = {image_id: str(config.IMAGES / image_id) for image_id in image_files}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    for idx, image_id in enumerate(image_files):
        df_image_id = df_filtered.iloc[idx]['image_id']
        if image_id != df_image_id:
            raise ValueError(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤: image_id '{image_id}' != df image_id '{df_image_id}' –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {idx}")
    st.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")

    return df_filtered, features, image_paths, cosine_sim, styles_dict, image_to_index


def show_recommendations(selected_id, df, image_paths, cosine_sim, styles_dict, image_to_index):
    try:
        image_id = str(selected_id) + '.jpg'

        if image_id not in styles_dict:
            st.error(f"–¢–æ–≤–∞—Ä —Å ID {selected_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.")
            return

        if image_id not in image_to_index:
            st.error(f"–î–ª—è —Ç–æ–≤–∞—Ä–∞ —Å ID {selected_id} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö.")
            return

        product_info = styles_dict[image_id]
        idx = image_to_index[image_id]

        similarity_scores = cosine_sim[idx]
        similar_indices = np.argsort(similarity_scores)[::-1][1:5]

        st.subheader("‚ú® –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã")
        cols = st.columns(5)

        with cols[0]:
            img_path = image_paths[image_id]
            img = load_image_from_path(img_path)
            if img:
                st.image(img, use_container_width=True, caption="–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä")
                st.caption(f"ID: {product_info['id']}")
                st.caption(f"{product_info['articleType']} ({product_info['baseColour']})")
                st.caption(f"–ü–æ–ª: {product_info['gender']}")
                st.caption(f"–°–µ–∑–æ–Ω: {product_info['season']}")

        for i, neighbor_idx in enumerate(similar_indices):
            with cols[i + 1]:
                try:
                    neighbor_image_id = df.iloc[neighbor_idx]['image_id']
                    neighbor_info = styles_dict[neighbor_image_id]

                    img_path = image_paths[neighbor_image_id]
                    img = load_image_from_path(img_path)

                    if img:
                        st.image(img, use_container_width=True,
                                 caption=f"–°—Ö–æ–∂–µ—Å—Ç—å: {similarity_scores[neighbor_idx]:.2f}")
                        st.caption(f"ID: {neighbor_info['id']}")
                        st.caption(f"{neighbor_info['articleType']} ({neighbor_info['baseColour']})")
                        st.caption(f"–ü–æ–ª: {neighbor_info['gender']}")
                        st.caption(f"–°–µ–∑–æ–Ω: {neighbor_info['season']}")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {str(e)}")

        with st.expander("üìù –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ"):
            st.json({
                "ID": int(product_info['id']),
                "–ü–æ–ª": product_info['gender'],
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": product_info['articleType'],
                "–¢–∏–ø": product_info['masterCategory'],
                "–¶–≤–µ—Ç": product_info['baseColour'],
                "–°–µ–∑–æ–Ω": product_info['season']
            })

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")


st.set_page_config(page_title="üëó –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –º–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", layout="wide")
st.title('üëó –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤')

try:
    df, features, image_paths, cosine_sim, styles_dict, image_to_index = load_data()

    num_images_to_display = 30
    df_limited = df.head(num_images_to_display).copy()

    with st.sidebar:
        st.header('üîç –§–∏–ª—å—Ç—Ä—ã')

        gender = st.selectbox('–ü–æ–ª', ['–í—Å–µ'] + sorted(df_limited['gender'].dropna().unique()))
        category = st.selectbox('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', ['–í—Å–µ'] + sorted(df_limited['articleType'].dropna().unique()))
        color = st.selectbox('–¶–≤–µ—Ç', ['–í—Å–µ'] + sorted(df_limited['baseColour'].dropna().unique()))
        season = st.selectbox('–°–µ–∑–æ–Ω', ['–í—Å–µ'] + sorted(df_limited['season'].dropna().unique()))

    filtered_df = df_limited.copy()
    if gender != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['gender'] == gender]
    if category != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['articleType'] == category]
    if color != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['baseColour'] == color]
    if season != '–í—Å–µ':
        filtered_df = filtered_df[filtered_df['season'] == season]

    st.subheader("üîé –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")

    num_cols = 4
    cols = st.columns(num_cols)
    col_idx = 0
    displayed_count = 0

    for _, row in filtered_df.iterrows():
        if displayed_count >= num_images_to_display:
            break

        image_id = row['image_id']
        if image_id in image_paths:
            with cols[col_idx]:
                try:
                    img_path = image_paths[image_id]
                    img = load_image_from_path(img_path)

                    if st.button(f"ID: {row['id']}", key=f"btn_{row['id']}"):
                        st.session_state.selected_id = str(row['id'])

                    if img:
                        st.image(img, use_container_width=True)
                        st.caption(f"{row['articleType']} ({row['baseColour']})")
                        st.caption(f"–ü–æ–ª: {row['gender']}")
                        st.caption(f"–°–µ–∑–æ–Ω: {row['season']}")

                    col_idx = (col_idx + 1) % num_cols
                    displayed_count += 1

                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ID {row['id']}: {str(e)}")

    if 'selected_id' in st.session_state:
        show_recommendations(
            st.session_state.selected_id,
            df,
            image_paths,
            cosine_sim,
            styles_dict,
            image_to_index
        )
    else:
        st.warning("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")

except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    st.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    st.error("1. –í—Å–µ –ª–∏ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö?")
    st.error("2. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã –ª–∏ –ø—É—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö PathConfig?")
